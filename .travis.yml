sudo: required
language: go

os:
  - linux

go:
  - 1.8.7

go_import_path: github.com/kubeless/kubeless

services:
  - docker
env:
  matrix:
    - TEST_TARGET=unit
    - TEST_TARGET=minikube
    - TEST_TARGET=minikube_core_triggers
    - TEST_TARGET=minikube_build_functions
    - TEST_TARGET=minikube_kafka
    - TEST_TARGET=minikube_nats
    - TEST_TARGET=GKE
  global:
    - CONTROLLER_IMAGE_NAME=bitnami/kubeless-controller-manager
    - BUILDER_IMAGE_NAME=kubeless/function-image-builder
    - CONTROLLER_TAG=${TRAVIS_TAG:-build-$TRAVIS_BUILD_ID}
    - CONTROLLER_IMAGE=${CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}
    - BUILDER_IMAGE=${BUILDER_IMAGE_NAME}:${CONTROLLER_TAG}
    - KAFKA_CONTROLLER_IMAGE_NAME=bitnami/kafka-trigger-controller
    - KAFKA_CONTROLLER_IMAGE=${KAFKA_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}
    - NATS_CONTROLLER_IMAGE_NAME=bitnami/nats-trigger-controller
    - NATS_CONTROLLER_IMAGE=${NATS_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}
    - CGO_ENABLED=0
    - TEST_DEBUG=1
    - GKE_VERSION=1.8.8-gke.0
    - MINIKUBE_VERSION=v0.25.2
    - secure: QTXmAe9Z5WkWq8KDvcP5JauyYrYaupywLUQjlE2SJWuD1wvgcQxPlkWF5NpSAL70TqnGhkmCmsfQBdJ+T59/yYjTldfnFumkp1dABdIURFPQc8h7IeF+evSSmwgaGwTc7bRPu9cprH1yflwyAEQmnzKGkT91ZHszZxfyMDFKPcFJhBdz2lcOsJRIetgrMOBS0sguZVnnY08okq6F0DEDk3SYT9RoPN0/NjyerPpxJ7arS2bN02R6ogBZM7LiTUF6aFuA3vaVKZarVBXYL5ZDr0HvHcSuT0T8F+CGDM7KALldOWgrNbDiVLXBliwRpQbxmKMti7gSftym77MYZHvfq7kKWNrJ/CkV0yXIBrvC0+CQ8Q6E7+dx6pD5HRPB4KGTvAJASZPpysDOcLvjIJh6UvCnQ6I0anoIeK3Socm3NQeEYr6gLVOtZfoiIL1D27NgOEtgviEMQ/haNW9x6O6LT4K/j5NAjm/mcW4/h5Z7vJHBnIbEVsXCe5hj8QmoH1hJvkRcgT5eB5E5dCidt+hMed/cD/ERb1XG1fnK6uBHLS3+sm86ZEyMu7/uI2OQkBtvhPthdcPsCB6rnJMdkIg2vq981vlxA7d2uWhhLX8lfhKMKLEhZtNJPBdcXNvo6a5GxbhHWlPIH7wli2be9t/UuZBRuSINnN4HBAXKWD364lo=
    - secure: NxB8NiLbhZpSwLEQoldgI6fDH3w2NuKcSFIHV/ZVqxO0zOknttP0t5UPmkCBKaVgWHo1PizkC7Iu/ukn757sqa9M4iZAlenl+uu4Zw86S6PMz5UsKwtivV1t6/fXaMqn/RryYzGFDPdgTWTSM97j0/b3iw09Ph5CvMhfT7gkinWtF/TZyx5MbSZfpFRM+zy8pm/TpwQ6xeYIFKlhshv9NMZrj5cVbp2S+9V1GR+eoYnaCXfN99cf+lNwKAMhFihKkFzYrXBy8QNflsvfc4JNJlTOzf3OQd6oQ2u+V+x4tHq4oyIjZAQBNLFR9zfF1ClbRdbmoWt8JxPEfVM0mNxzRKnSHs+o7ZkBlAs8vxSnH4f4qWMlHAD3CKzc+jDKIYLdFtwLMP/0PVNF5EvYfteSKa/+dZtGFMweJu3ZMG2ikFT9kmpJ/RBncePm40yVIpqkMgf6VlsXYnD9pdlBvIaEZK5Qa9DHpkJAhiJ2ZPV4YxoAn2n9L/++EicHB8Wy+wud3yJFVSUDx+Gg5njJGOx32pypQReY7objy7nRuR0r9dhNyQ+VgCUp8Cv9pyJjXUqjOauAF60n+2KuOo6NKYg5lA9IqcOKP7svlFwgtOpKHEC1tg9CKhdhRr82TFBuJsyuAzVulDAOcxHSMJP7bz4I9Jtxxr4EMjYrpoOfgkOlmxY=
    - secure: qbbTVfwkOraWTkQ8SxJOAsjv7qVrWqrOINIOCeFcKzwrQPHVjzr97JeOcQK73PLTwkgYg8QurwiRGB98O0fcroiqbzgXIwVk0yFrRtbmcaQ/NYXt9ipfPeeChsn8bwF7vYRuGfz9HybCU2CBmxwjJqfTeU2iqvOFfAH2Sh4b6VmbCVkINn4GFHLATcwHKoQO16B6S+z4FGSHX/AWT3vRFTBZZ65gZF7evPURtNDbumwe28KCKzmqySF5UKw2HEmDyCD+fRozlCcWYC2lbS2iZn/d0VXZvUpZxpEDVyaHdH/n6I03DZ+gnbgCi+/uw7d96s3pjomPkCiY9VfmQPl020kR8FeREyOsc0rqYtrxwe1ImKJUHsjdUZ6nUL5HcFyWJdKX6txn6bUJwUOF/+lg1O34n0ZJym3j5sm7kyoBzh0lTRMiue7Nd9WD7iJePmPEfb+Sk6UGCjgf/KGkcGr75jaVFb3AsIjtGgbq9BDQN4SKRGW3NSmXZ6pKbwFm1b6c+LPPOTukKsPTUBwEqcCCwoNSqcgIBv325dBEKJMa945/RR7E7/KXzKoWkoLkKZUTPKtVJpjsIxVkq1spPZQmmSZ3FBUww2tC+l6stD62xDYSuBH6iqLhU/xpeAjizCMS1YjNUxjs1oVBkdu2IEUV61SOoZtYyIgDvvPGpm2YcgQ=
    - secure: HbpGKPXLPT2t24YUXuk/A4Sb0K5z1AdsTz9Xo3loQr/yuR07kDhkhV5qkrgDO7wL+4VD+n1vEwtTIqnSAwWmcP0fxaWO56efgAhstXz117wcHAcfJgFTPuwMsZKqWNPc5T4yeyUNlx8UZcs1a6oCHPH2Q8fF5dOukJ74JS82YU1KIxa+TpziFaBZ5Ti/WHkCtaNxd15u3vneRUnXmBY9XUDLelSTwmUXFUYwtDYezF9U9yr8LlZoRVlkNe1NT1YQoWLmi2UaEo4rVjOisKlL8/ejOeciL6o8zYJ2XdKO58AvdyDJi90/txYjHhPJiAcL996EWIBNkg0Ms2Y6QgIpitOD8/HrxB0qONFX4suv5XDG/u3fO++JA1FTXFlQzL8/ulG94YcCyivDBQfmUb3KVNOpU1JZKqJY7bfGZwg90IJSirjixpGMh99Gm9R2WNLjPvIkjBZug3ZGiVgVL3PR4UGGkeKYYzNX+SWcTdC2ECu8HtbF/8HklpWB69gf+lN9xGgZE31+Yi3sd/zcIeECiOW3AaIGVoYOSuf+iXooG44BqFS9kHQtx2oKu73uS9/5jFu5TqU5B3v7Yryb3VHRrKqwkRAJZDl/Sdq9pbycS0xAzZErrU52iiAj5SNJyhOI+SojeuWuxo4O40w1wKi742VEWqKPHcYKYixNz+RvJEY=
    - secure: CXyDSLR6KJGoPN4ApD4UjIqXxKWxvbSuun1Py3ViI6XuhJOjTBlNJVvCV3cZUD+Dvs98sUnNVvrZgoP/YxCIF6tPzm6VboiO75gxXKJQCDbOuUE9PhBiU2WhHCEXS0AL7emCgKqOw4hNWUdyzhx+lytZkIrFFwuT0qUVqCF/1ccDJXEl3YeMotoMqiV+XQZIvoMNQVY8ENJvYNoBWi+iFF+lSRBUMavB/4soXvZjASMfz189/BQTGfXeOeKu6E+O51zup7Z+W28b9bO1r47jjY8VFdLrnnfDPtN7qEd/An4OkICnijcMHbS4n1NO9mb/wzYvOuo7hDWU5cHDbN/rhaoFmHa/8Qp9N8UMza70ps4mO4jYg+e9ZTGZvFMRU3gcF7XRkrdqBFQOsgTVJrZsfzRFiV5M30PXv4gc7UXVvsHrSj76bRpQL+dkGdqIQZxc9OFAOJ/dRLwGowu1dS5N63444xGx5PuC5IZ81Z4qIDfzpAfM5637NHrkNT9KRFyJktAK8XK1e7c1wD95uFyEDv9UPziJLEPOtTP8/YLSs1H0TgjVAyStv6HcqHDHff5n25rFehNlULpJcktqKv1YEyYGak9nwGsSTk2h73kvKp2cAfLdlW9vN9IxF60G+G+OmB4ycK+KfU0FNg/NVm40+LeogIWgz9Xh3LV+obEeMC0=
    - secure: tywTqujLrvN0xzjawWvNniav1c/FNcgI+A+u2IdbPxb4yeO5k2Sc71nN2kHYCdD1o3K8ehAUTPF4DlNiEWGlfMhqofciSDEsSUXKz39ndZng7RXIJU9u8PGFhGSHwoZOPvVTTABT8Fa+i+omgdUsQkJOAghw1AZUD+W0Tp88J/PEZcWLd0WuslKPAioUEsNqftPT7kWVc+4BoGnZ2ZejlKsNwYnGNPCIVoE7eMa1MQM6UqsMfTzln8dQO8Ab0qVNEcm5tkwDlYoEl4kF6smV/GpnUJvMnXJycTnCr9XB7/t4Hxr1GJlQm6dumsweXTFoZTXDZtCsRtXbaFrFg+pqRRs+9BqOIDFXO1PFLrf1eryaztiErysdr66LR4/9pS1IZ8I2wJGh3bXEWDSY4clc0syusuXOKSlNDHQsWbPMC2IDNygQr/DigQmtYrwLpdiiUsF1XPHMyQKGmop6ewTYzd7DrJWwDGPrkW2YIJQgvxpkX58/dKNp4BZQY5wuXKQLvUQjFOa3gelfsbFFuhQEEbcIfINBI9TuM5K0Q+HXPdlfef/0Cbp6pktIEUYErK46mf2iy+1phXDZ0UPz/ZXe2NmawEPQVMBJaCIkr/B75mn5p7oGSKdJ3NpN87Bbn+Pwpx3tKpuDpc9hOjlfAGo+dcU6BAYkcwUSBGInjUsRNf4=
    - secure: mBEGUo1T1Gv+wUdYZU+XJYqQtAiCZ1C18Fcsu4qmKDpeucN8/t37PgnWGGDkB/XKrqjI7EDukk/8b0fb/fAkjjzoJiF8CvHtTHoLHHzr3pFzh9xC8QKMq9wvDYPNNV5OZdsD5dzxsxR0OwEAC6LV70E7LYQfUF/p6mBEspFgMZ20nPXzXQgbhS2rlYic9pcLQ9556uHjBHuZSLrhIGGxv4ekFpyxCIOQJQVZSS48RGkEsiKOmQqAVy9Oiof+CWMvhuvpzkE9unyhoPIPir/JgT2WH8Lz8Gxcj4xBotpbi1rZGayAnb5xuEgAHIgzngA7Eg9MxEZacKtA4p1fzw6RW99lK3IRBxIo92xRfO9xtj6FB34x06Loym2zK3kI6obD3mL3naN63+xySX3nmgkXouTK5ZPDW2bUEChNtocj06OvygReDwFUmQIgTxeK5Ju4FVDjYhm++8DL4JQ5SJR1GM+4IfVcZCD/OHP+E8BY3CTjWXkQ6d9CmWSJjFoDefaautn1cS1Bz7jMHpvy1pUSgv/326J53PVw5+65jeAi1/9QePiIFLzJFJT3OasD/2MOV8KQkQXvDvDAtd7N3VkrrJsdlEfcoSGCQ0kC3UFeUhn/7U+HuiIIJJdjRgTvuiAW25CXuJ7nDKbYNQksYLeb8mLuWZbCV7d7OrOCyGlSzb0=
before_install:
  - set -e
  # Decide if we should run the tests
  - |
    case $TEST_TARGET in
    # We will always build assets when doing unit tests or minikube end-2-end tests
    unit|minikube|minikube_core_triggers)
      export SHOULD_TEST=1
      ;;
    minikube_build_functions)
      export SHOULD_TEST=1
      # Restart docker with an insecure registry
      sudo bash -c "echo '{\"host\": \"unix:///var/run/docker.sock\", \"storage-driver\": \"overlay2\", \"insecure-registries\" : [\"0.0.0.0/0\"]}' > /etc/docker/daemon.json"
      sudo service docker restart
      docker info
      docker run -d -p 5000:5000 --restart=always --name registry -v /data/docker-registry:/var/lib/registry registry:2
      ;;
    # In case of GKE we will only want to build if it is
    # a build of a branch in the kubeless/kubeless repository
    GKE)
      if [[ -n "$GKE_ADMIN" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]]; then
        export SHOULD_TEST=1
        export SHOULD_INSTALL_GCLOUD=1
      fi
      ;;
    # In kase of minikube+kafka we want to test it if
    # it is a Pull Request related to Kafka (discovered from the PR title)
    # or if the build is from the "master" branch
    minikube_kafka)
      if [[ "$TRAVIS_PULL_REQUEST" != false ]]; then
        pr_kafka_title=$(curl "https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/${TRAVIS_PULL_REQUEST}" | grep title || true)
      fi
      if [[ "$TRAVIS_PULL_REQUEST" == false || "$pr_kafka_title" == "" || "$pr_kafka_title" =~ ^.*(Kafka|kafka|KAFKA).*$ ]]; then
        export SHOULD_TEST=1
      fi
      ;;
    # In kase of minikube+NATS we want to test it if
    # it is a Pull Request related to NATS (discovered from the PR title)
    # or if the build is from the "master" branch
    minikube_nats)
      if [[ "$TRAVIS_PULL_REQUEST" != false ]]; then
        pr_nats_title=$(curl "https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/${TRAVIS_PULL_REQUEST}" | grep title || true)
      fi
      if [[ "$TRAVIS_PULL_REQUEST" == false || "$pr_nats_title" == "" || "$pr_nats_title" =~ ^.*(Nats|nats|NATS).*$ ]]; then
        export SHOULD_TEST=1
      fi
      ;;
    esac
install:
  - |
    if [[ "$SHOULD_TEST" == "1" ]]; then
      make bootstrap
    fi
    if [[ "$SHOULD_INSTALL_GCLOUD" == "1" ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS=$TRAVIS_BUILD_DIR/client_secrets.json
      openssl aes-256-cbc -K $encrypted_1dbafa65b3ad_key -iv $encrypted_1dbafa65b3ad_iv -in .github/gcloud.json.enc -out $GOOGLE_APPLICATION_CREDENTIALS -d
      if [ ! -d $HOME/gcloud/google-cloud-sdk ]; then
        mkdir -p $HOME/gcloud &&
        wget -q https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-187.0.0-linux-x86_64.tar.gz --directory-prefix=$HOME/gcloud &&
        cd $HOME/gcloud &&
        tar xzf google-cloud-sdk-187.0.0-linux-x86_64.tar.gz &&
        printf '\ny\n\ny\ny\n' | ./google-cloud-sdk/install.sh &&
        cd $TRAVIS_BUILD_DIR;
      fi
      gcloud -q config set project $GKE_PROJECT
      if [ -a $GOOGLE_APPLICATION_CREDENTIALS ]; then
        gcloud -q auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS;
      fi
      echo "Starting GKE cluster"
      export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-${TRAVIS_BRANCH} | sed 's/[^a-z0-9-]//g')
      ./script/start-gke-env.sh $ESCAPED_GKE_CLUSTER $ZONE $GKE_VERSION $GKE_ADMIN > $TRAVIS_BUILD_DIR/gke-start.log 2>&1 &
      GKE_START_PID=$!
    fi
    sudo apt-get install apache2-utils

script:
  - |
    if [[ "$SHOULD_TEST" == "1" ]]; then
      git fetch --unshallow
      make VERSION=${TRAVIS_TAG:-build-$TRAVIS_BUILD_ID} binary
      make controller-image CONTROLLER_IMAGE=$CONTROLLER_IMAGE
      make all-yaml
      sed -i.bak 's/'":latest"'/'":${CONTROLLER_TAG}"'/g' kubeless.yaml
      sed -i.bak 's/'":latest"'/'":${CONTROLLER_TAG}"'/g' kubeless-non-rbac.yaml
      sed -i.bak 's/'":latest"'/'":${CONTROLLER_TAG}"'/g' kubeless-openshift.yaml
      sed -i.bak 's/'":latest"'/'":${CONTROLLER_TAG}"'/g' kafka-zookeeper.yaml
      sed -i.bak 's/'":latest"'/'":${CONTROLLER_TAG}"'/g' nats.yaml
      case $TEST_TARGET in
      unit)
        make test
        make validation
        ;;
      minikube)
        ./script/integration-tests minikube deployment
        ./script/integration-tests minikube basic
        ;;
      minikube_core_triggers)
        ./script/integration-tests minikube deployment
        ./script/integration-tests minikube cronjob
        ./script/integration-tests minikube http
        ;;
      minikube_build_functions)
        make function-image-builder FUNCTION_IMAGE_BUILDER=$BUILDER_IMAGE
        sed -i.bak 's/enable-build-step: "false"/enable-build-step: "true"/g' kubeless.yaml
        sed -i.bak 's/function-registry-tls-verify: "true"/function-registry-tls-verify: "false"/g' kubeless.yaml
        ./script/integration-tests minikube deployment
        ./script/integration-tests minikube prebuilt_functions
        ;;       
      minikube_kafka)
        make kafka-controller-image KAFKA_CONTROLLER_IMAGE=$KAFKA_CONTROLLER_IMAGE
        ./script/integration-tests minikube deployment
        ./script/integration-tests minikube kafka
        ;;
      minikube_nats)
        make nats-controller-image NATS_CONTROLLER_IMAGE=$NATS_CONTROLLER_IMAGE
        ./script/integration-tests minikube deployment
        ./script/integration-tests minikube nats
        ;;
      GKE)
        make function-image-builder FUNCTION_IMAGE_BUILDER=$BUILDER_IMAGE
        make kafka-controller-image KAFKA_CONTROLLER_IMAGE=$KAFKA_CONTROLLER_IMAGE
        make nats-controller-image NATS_CONTROLLER_IMAGE=$NATS_CONTROLLER_IMAGE
        docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
        docker push $CONTROLLER_IMAGE
        docker push $BUILDER_IMAGE
        docker push $KAFKA_CONTROLLER_IMAGE
        echo "Waiting for the GKE cluster to be ready"
        tail -f $TRAVIS_BUILD_DIR/gke-start.log &
        wait $GKE_START_PID
        if ! kubectl get pods -n kubeless 2>&1 | grep -q "No resources found"; then
          echo "Waiting for a previous installation to be cleaned"
          bash -c 'grep -q "No resources found" <(timeout 60 kubectl get pods -n kubeless -w 2>&1)'
        fi
        ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} deployment
        ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} basic
        ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} cronjob
        ./script/integration-tests gke_${GKE_PROJECT}_${ZONE}_${ESCAPED_GKE_CLUSTER} kafka
        ;;
      esac
    else
      echo "Skipping tests"
    fi

after_success:
  - |
    if [[ "$TRAVIS_BRANCH" == master && \
          "$TRAVIS_PULL_REQUEST" == false && \
          "$TEST_TARGET" == "GKE" ]]; then
      docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
      docker tag $CONTROLLER_IMAGE ${CONTROLLER_IMAGE_NAME}:latest
      docker tag $BUILDER_IMAGE ${BUILDER_IMAGE_NAME}:latest
      docker tag $KAFKA_CONTROLLER_IMAGE ${KAFKA_CONTROLLER_IMAGE_NAME}:latest
      docker tag $NATS_CONTROLLER_IMAGE ${NATS_CONTROLLER_IMAGE}:latest
      docker push ${CONTROLLER_IMAGE_NAME}:latest
      docker push ${BUILDER_IMAGE_NAME}:latest
      docker push ${KAFKA_CONTROLLER_IMAGE_NAME}:latest
    fi

before_deploy:
  - |
    if [[ "$SHOULD_TEST" != "1" ]]; then
      echo "Unable to release a job that has not been tested!"
      return 1
    fi
  - |
    if [ "$TEST_TARGET" = minikube ]; then
      make VERSION=${TRAVIS_TAG:-build-$TRAVIS_BUILD_ID} binary-cross
      for d in bundles/kubeless_*; do zip -r9 $d.zip $d/; done
      docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
      docker tag $CONTROLLER_IMAGE ${CONTROLLER_IMAGE_NAME}:latest
      docker push $CONTROLLER_IMAGE
      NEW_DIGEST=$(./script/find_digest.sh  ${CONTROLLER_IMAGE_NAME} ${TRAVIS_TAG} | cut -d " " -f 2)
      sed 's/'":${CONTROLLER_TAG}"'/'"@$NEW_DIGEST"'/g' kubeless.yaml > kubeless-${TRAVIS_TAG}.yaml
      sed 's/'":${CONTROLLER_TAG}"'/'"@$NEW_DIGEST"'/g' kubeless-non-rbac.yaml > kubeless-non-rbac-${TRAVIS_TAG}.yaml
      sed 's/'":${CONTROLLER_TAG}"'/'"@$NEW_DIGEST"'/g' kubeless-openshift.yaml > kubeless-openshift-${TRAVIS_TAG}.yaml
      cp kafka-zookeeper.yaml kafka-zookeeper-${TRAVIS_TAG}.yaml
      cp kafka-zookeeper-openshift.yaml kafka-zookeeper-openshift-${TRAVIS_TAG}.yaml
      cp nats.yaml nats-${TRAVIS_TAG}.yaml
    fi

deploy:
  provider: releases
  api_key:
    secure: rOXYYMxdFrP7mtExHLK+IOwW7LmV8Y7pJjiOx023F/z0HeyJLcFDY4Mvr6n+nIjf8idPnINARYiHH0eBTDAKNsBhpod+QPexO3gy8bWAbZS6c1wQtV6EuKKfDhvsLQdylh+9pBrtC71GMxBzGWKzcs2dxHZULNrjDxqA99JMWpkzJRVcaU0D9c68aUVIXdI90NTEWG+yuAUw+qWaHIDGNDylS3/5DXs+PNV75ExuL3dWxXJQlEK7+l60/0rMNm+VZIX/5T3YE/cfdXoD2wl82umjzNzoBk2emo2MfHtCyxf+XYBEDZeRHZHZSOg3HCOcRmbKKzOLNkvaSMlyT4celiZoOrR1vASbxzJOBcW+QkCoJ5QAxXwZD7KJk0V89AOv6YR2skMbG7a7+tzkeZ8VHZny7VMgrTBi6bYxZDV1+v28Xm0R/GWnot2W/Nk92mHyVyh3XifMrOHTgXb6G6iIpCypj0i6Ktr9p8uZEhUTqcpljAcRQdnMNHaWWPttM5T3IW94iROdymPwo65FJukHQv/h3GjYB0P1jagBZfbcYQNX/wEjZ3tIVknYfXfRlZXTQjj29DAynGTbw8q07iRR2eNiDUQAS54JQnXOewUtmVRo9maIjxUs4XEE3/IsRNXpwMKGCOP+fjHeL8XtDwrRzmw8nS0LcnooKpMCaOYD4hA=
  file_glob: true
  file:
    - kubeless-${TRAVIS_TAG}.yaml
    - kubeless-non-rbac-${TRAVIS_TAG}.yaml
    - kubeless-openshift-${TRAVIS_TAG}.yaml
    - kafka-zookeeper-${TRAVIS_TAG}.yaml
    - kafka-zookeeper-openshift-${TRAVIS_TAG}.yaml
    - nats-${TRAVIS_TAG}.yaml
    - bundles/kubeless_*.zip
  skip_cleanup: true
  overwrite: true
  on:
    tags: true
    repo: kubeless/kubeless
    condition: $CGO_ENABLED = 0

after_deploy:
  - ./script/upload_release_notes.sh ${TRAVIS_TAG}
